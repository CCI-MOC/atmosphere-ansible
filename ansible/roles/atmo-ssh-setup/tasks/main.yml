---

# Try to connect as root. If this fails, root setup is required
- name: Test default ansible connection and register root_connection
  local_action: "shell ssh -o PreferredAuthentications=publickey -p {{ ansible_port }} root@{{ ansible_host }} 'echo success' | grep 'success'"
  register: root_connection
  ignore_errors: yes

# If root connection failed, check for CentOS
- name: Test CentOS connection and register centos_connection
  local_action: "shell ssh -o PreferredAuthentications=publickey -p {{ ansible_port }} centos@{{ ansible_host }} 'echo success' | grep 'success'"
  register: centos_connection
  ignore_errors: yes
  when: root_connection.stdout != "success"

# If root and CentOS connection failed, check for Ubuntu
- name: Test Ubuntu connection and register ubuntu_connection
  local_action: "shell ssh -o PreferredAuthentications=publickey -p {{ ansible_port }} ubuntu@{{ ansible_host }} 'echo success' | grep 'success'"
  register: ubuntu_connection
  ignore_errors: yes
  when: root_connection.stdout != "success" and centos_connection.stdout != "success"

# If centos_connection variable exists and CentOS connection succeeded, determine CentOS version
# and set use_remote_user before continuing to setup-root.yml
- name: Set use_remote_user variable to "centos"
  set_fact: use_remote_user=centos
  when: not centos_connection|skipped and centos_connection.stdout == "success"

# If ubuntu_connection variable exists and Ubuntu connection succeeded, do some Ubuntu specific
# preparation and set use_remote_user before running setup-root.yml
- name: Set use_remote_user variable to "ubuntu"
  set_fact: use_remote_user=ubuntu
  when: not ubuntu_connection|skipped and ubuntu_connection.stdout == "success"

- name: Set use_remote_user variable to "root"
  set_fact: use_remote_user=root
  when: root_connection.stdout == "success"

# First non-local action (need to use remote_user and become)
# Install Python2.7 for Ubuntu 16.04
- block:
  - name: Manual Ubuntu version detection
    raw: cat /etc/lsb-release | grep DISTRIB_RELEASE=
    register: ubuntu_version

  - name: Install Python2 on Ubuntu 16.04
    raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
    become: True
    when: ubuntu_version.stdout.find("DISTRIB_RELEASE=16.04") != -1

  - name: Set ansible_python_interpreter to python2.7 on Ubuntu 16.04
    set_fact: ansible_python_interpreter=/usr/bin/python2.7
    when: ubuntu_version.stdout.find("DISTRIB_RELEASE=16.04") != -1
  remote_user: "{{ use_remote_user }}"
  when: use_remote_user == "ubuntu"

- name: Manual CentOS version detection
  raw: cat /etc/redhat-release | awk '{print $3}'
  register: centos_version
  when: use_remote_user == "centos"

# The previous tasks will have prepared either CentOS or Ubuntu for the setup-root.yml
- name: Include setup-root.yml, use_remote_user will be either 'ubuntu' or 'centos'
  include: setup-root.yml
  when: use_remote_user is defined

# BEYOND THIS POINT, ROOT SSH IS AVAILABLE

- name: Directly check linux distribution
  stat: path=/etc/redhat-release
  register: linux_distro

- name: make sure ssh directory exists
  file: path=/root/.ssh/ state=directory mode="0700"

- name: add ssh keys to authorized_keys
  authorized_key: user=root key="{{ item }}" state=present
  with_items: '{{ SSHKEYS }}'
  when: SSHKEYS is defined

- name: remove ssh keys from authorized_keys
  authorized_key: user=root key="{{ item }}" state=absent
  with_items: '{{ SSH_KEYS_TO_REMOVE }}'
  when: SSH_KEYS_TO_REMOVE is defined

- name: /etc/ssh/sshd_config changes
  lineinfile: dest=/etc/ssh/sshd_config backup=yes regexp="{{ item.regexp }}" line="{{ item.line }}"
  with_items:
    - { regexp: '^PermitRootLogin', line: 'PermitRootLogin without-password'}
    - { regexp: '^UseDNS', line: 'UseDNS no'}

  # If port line is commented or not commented out it is removed
- name: ensure that the ports are correct in sshd_config
  lineinfile: dest=/etc/ssh/sshd_config backup=yes regexp="^Port" state=absent
- lineinfile: dest=/etc/ssh/sshd_config backup=yes regexp="^#Port" state=absent

  # Add 'Port 22' entry
- name: Add port entry - Ubuntu
  lineinfile: dest=/etc/ssh/sshd_config backup=yes backrefs=yes regexp="^# What ports, IPs and protocols we listen for" line="# What ports, IPs and protocols we listen for\nPort {{ SSH_PORT }}"
  when: use_remote_user == "ubuntu" or not linux_distro.stat.exists

- name: Add port entry - CentOS
  lineinfile: dest=/etc/ssh/sshd_config backup=yes backrefs=yes regexp="^# default value." line="# default value.\nPort {{ SSH_PORT }}"
  when: use_remote_user == "centos" or linux_distro.stat.exists

- name: Remove all AllowUsers lines to /etc/sshd_config
  lineinfile: dest=/etc/ssh/sshd_config regexp="{{ item }}" state=absent
  with_items:
    - AllowUsers
    - AllowGroups

- name: /etc/ssh/sshd_config changes
  lineinfile: dest=/etc/ssh/sshd_config backup=yes regexp="{{ item.regexp }}" line="{{ item.line }}"
  with_items:
    - { regexp: '^PermitRootLogin', line: 'PermitRootLogin without-password'}
    - { regexp: '^UseDNS', line: 'UseDNS no'}
    - { regexp: '^PasswordAuthentication', line: 'PasswordAuthentication yes'}

- name: Append AllowGroups Line to /etc/ssh/sshd_config
  lineinfile: dest=/etc/ssh/sshd_config line="AllowGroups {{ SSH_ALLOW_GROUPS }}"

- name: restart ssh - Ubuntu
  service: name=ssh state=restarted
  when: use_remote_user == "ubuntu" or not linux_distro.stat.exists

- name: restart sshd - CentOS
  service: name=sshd state=restarted
  when: use_remote_user == "centos" or linux_distro.stat.exists
